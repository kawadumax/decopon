use axum::{
    Router,
    extract::{Path, State},
    http::StatusCode,
    response::Json,
    routing::get,
};
use sea_orm::DatabaseConnection;
use serde::{Deserialize, Serialize};
use std::sync::Arc;

use crate::entities::post;
use crate::services::posts;

#[derive(Serialize, Deserialize)]
pub struct CreatePostRequest {
    pub title: String,
    pub text: String,
}

#[derive(Serialize)]
pub struct PostResponse {
    pub id: i32,
    pub title: String,
    pub text: String,
}

impl From<post::Model> for PostResponse {
    fn from(post: post::Model) -> Self {
        PostResponse {
            id: post.id,
            title: post.title,
            text: post.text,
        }
    }
}

pub fn routes() -> Router<AppState> {
    Router::new()
        .route("/", get(get_posts).post(create_post))
        .route("/{id}", get(get_post))
        .with_state(db)
}

async fn get_posts(
    State(db): State<Arc<DatabaseConnection>>,
) -> Result<Json<Vec<PostResponse>>, StatusCode> {
    let posts = posts::get_posts(&db)
        .await
        .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?;
    let posts: Vec<PostResponse> = posts.into_iter().map(Into::into).collect();
    Ok(Json(posts))
}

async fn get_post(
    Path(id): Path<i32>,
    State(db): State<Arc<DatabaseConnection>>,
) -> Result<Json<PostResponse>, StatusCode> {
    let post = posts::get_post_by_id(&db, id)
        .await
        .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?
        .ok_or(StatusCode::NOT_FOUND)?;
    Ok(Json(post.into()))
}

async fn create_post(
    State(db): State<Arc<DatabaseConnection>>,
    Json(payload): Json<CreatePostRequest>,
) -> Result<Json<PostResponse>, StatusCode> {
    let insert_result = posts::insert_post(&db, &payload.title, &payload.text)
        .await
        .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?;

    let inserted_post = posts::get_post_by_id(&db, insert_result.last_insert_id)
        .await
        .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?
        .ok_or(StatusCode::NOT_FOUND)?;
    Ok(Json(inserted_post.into()))
}
